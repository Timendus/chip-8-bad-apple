# Bad Apple for XO-CHIP, 2022
# Written for OctoJam 9
#  * Video encoding and decoding - Timendus
#  * Music arrangement and coding - Kouzeru

#include "music/header.8o"

:alias ticks vA
:alias current-frame-hi vB
:alias current-frame-lo vC
:alias playing vD
:alias frames-per-image vE

:const STOPPED 0
:const PLAYING 1
:const STEPPING 2

: main
  clear
  loadSong 0 70 # or 65?
  :alias unpack-hi current-frame-hi
  :alias unpack-lo current-frame-lo
  :unpack long bad_apple_001
  playing := PLAYING
  frames-per-image := 0
  delay := frames-per-image # Reset timing

: main-loop
  # This loop syncs to 15FPS and does the high-frequency stuff
  ticks := 4 # 4/60th = 1/15th of a second = 15 FPS
  loop
    loop
      # Handle key input
      vF := 6
      if vF key begin
        v0 := PLAYING
        playing ^= v0 # Play / pause the video
        loop if vF key then again
      end
      vF := 9
      if vF key begin
        playing := STEPPING
        loop if vF key then again
      end
      vF := 4
      if vF key then jump main  # Restart the video

      # Are we playing?
      if playing == STOPPED begin
        vF := 0
        buzzer := vF
        jump main-loop
      end

      # Wait for one display refresh
      vF := delay
      if vF != 0 then
    again
    vF := 1
    delay := vF

    # Play the music, which destroys every register under the sun
    i := safe-storage  save vA - vE
    songPlayNextTick
    i := safe-storage  load vA - vE

    ticks -= 1
    if ticks != 0 then
  again

  # From here on down we know we're running this code at 15FPS

  # If we're stepping, stop after this frame
  if playing == STEPPING then playing := STOPPED

  # Do we have any duplicate frames left to play?
  if frames-per-image != 0 begin
    frames-per-image -= 1
    jump main-loop
  end

  # Get pointer to current frame in i
  get-frame-pointer

  # Load image type and frames per image
  load v0
  #if SCHIP
    vF := 1
    i += vF
  #end
  frames-per-image := 31
  frames-per-image &= v0  # number of frames to show this image for
  vF := 1                 # number of bytes consumed so far
  update-frame-pointer

  # Show the next frame on the screen
  decode # takes i and v0 as input

  # Are we done..?
  :alias unpack-hi v2
  :alias unpack-lo v3
  :unpack long the-end
  if current-frame-hi != v2 then jump main-loop
  if current-frame-lo != v3 then jump main-loop

  # We're done! ðŸŽ‰
  vF := 0
  buzzer := vF
  loop
    vF := 4
    if vF key then jump main  # Restart the video
  again

# Get pointer to current frame in i
: get-frame-pointer
  i := smc-load-current-frame
  save current-frame-hi - current-frame-lo
  0xF0 0x00 # i := long ...
: smc-load-current-frame
  0 0
  return

# Move frame pointer vF bytes
: update-frame-pointer
  current-frame-lo += vF
  current-frame-hi += vF
  return

: safe-storage
  0 0 0 0 0

#include "music/player.8o"
#include "music/song.8o"

#include "decoder.8o"
#include "dictionary.8o"
#include "frames.8o"

#data
: the-end  # So we know when we're out of frames
