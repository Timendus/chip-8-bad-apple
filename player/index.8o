# Bad Apple for XO-CHIP, 2022

:alias current-frame-hi vB
:alias current-frame-lo vC
:alias playing vD
:alias frames-per-image vE

:const STOPPED 0
:const PLAYING 1
:const STEPPING 2

: main
  clear
  :alias unpack-hi current-frame-hi
  :alias unpack-lo current-frame-lo
  :unpack long bad_apple_001
  playing := PLAYING
  frames-per-image := 0
  delay := frames-per-image # Reset timing

: main-loop
  # This loop syncs to 7,5FPS and does the high-frequency stuff
  loop
    # Handle key input
    vF := 6
    if vF key begin
      v0 := PLAYING
      playing ^= v0 # Play / pause the video
      loop if vF key then again
    end
    vF := 9
    if vF key begin
      playing := STEPPING
      loop if vF key then again
    end
    vF := 4
    if vF key then jump main  # Restart the video

    # Sync to 7,5FPS
    vF := delay
    if vF != 0 then
  again
  vF := 4
  delay := vF

  # Are we playing?
  if playing == STOPPED then jump main-loop
  if playing == STEPPING then playing := STOPPED

  # Do we have any duplicate frames left to play?
  if frames-per-image != 0 begin
    frames-per-image -= 1
    jump main-loop
  end

  # Get pointer to current frame
  i := smc-load-current-frame
  save current-frame-hi - current-frame-lo
  0xF0 0x00 # i := long ...
: smc-load-current-frame
  0 0

  # Load image type and frames per image
  load v0
  #if SCHIP
    vF := 1
    i += vF
  #end
  v1 := 128
  v1 &= v0                # v1 is wether this is a diff frame or a keyframe
  if v1 != 0 then clear
  frames-per-image := 63
  frames-per-image &= v0  # number of frames to show this image for
  vF := 1                 # number of bytes consumed so far
  update-frame-pointer

  # Show/update the image on screen
  v1 := 64
  v1 &= v0
  if v1 == 0 begin
    plain-copy
  else
    rle-decode
  end

  # Are we done..?
  :alias unpack-hi v2
  :alias unpack-lo v3
  :unpack long the-end
  if current-frame-hi != v2 then jump main-loop
  if current-frame-lo != v3 then jump main-loop

  # We're done! ðŸŽ‰
  loop again

# Move frame pointer vF bytes
: update-frame-pointer
  current-frame-lo += vF
  current-frame-hi += vF
  return

#include "decoder.8o"
#include "frames.8o"

#data

: the-end
