:alias X v2
:alias Y v3
:alias startX v4
:alias width v5
:alias height v6
:alias stride v7

:if HIRES
  :const HORIZ_MARGIN 16
  :const OUTPUT_WIDTH 96
  :const OUTPUT_HEIGHT 64
:else
  :const HORIZ_MARGIN 8
  :const OUTPUT_WIDTH 48
  :const OUTPUT_HEIGHT 32
:end
:calc HORIZ_END { HORIZ_MARGIN + OUTPUT_WIDTH }

:macro draw-byte {
  sprite X Y 1
  :if SMOOTHING
    Y += 1
    sprite X Y 1
    Y -= 1
  :end
}

# Decode the next frame, pointed to by i
# Don't mess up vB - vE, make sure we update frame pointer
: decode
  # Load settings byte
  load v0
  :if SCHIP
    vF := 1
    i += vF
  :end
  v2 := 1           # Number of bytes consumed so far

  # Is this a repeated frame?
  v1 := 2
  v1 &= v0
  if v1 != 0 begin
    load frames-per-image - frames-per-image
    vF := 1
    i += vF
    v2 += 1         # Update number of bytes consumed so far
  end

:if SCROLLING
  # Do we have to scroll the current display?
  v1 := 1
  v1 &= v0
  if v1 != 0 begin
    load v1 - v1
    vF := 1
    i += vF
    v2 += 1         # Update number of bytes consumed so far

    # Decode direction
    v3 := 1
    v3 &= v1
    if v3 != 0 then scroll-left
    v3 := 2
    v3 &= v1
    if v3 != 0 then scroll-right
    v3 := 4
    v3 &= v1
    if v3 != 0 then scroll-up 4
    v3 := 8
    v3 &= v1
    if v3 != 0 then scroll-up 2
    v3 := 16
    v3 &= v1
    if v3 != 0 then scroll-down 4
    v3 := 32
    v3 &= v1
    if v3 != 0 then scroll-down 2
  end
:end

  # Register number of bytes consumed so far
  vF := v2
  update-frame-pointer

  # Is this a diff? Or do we need to clear the screen?
  v1 := 128
  v1 &= v0
  if v1 == 0 then clear

  # Is the bounding box enabled?
  v1 := 16
  v1 &= v0
  if v1 == 0 begin
    # No bbox, so do the whole screen
    X := HORIZ_MARGIN
    Y := 0
    startX := HORIZ_MARGIN
    width := HORIZ_END
    height := OUTPUT_HEIGHT
  else
    # Decode bbox coordinates from the next two bytes
    load v8 - v9
    vF := 2         # This load doesn't post-increment in XO-CHIP
    i += vF
    vF := 2
    update-frame-pointer

    Y := 31         # Take bottom 5 bits for minY and maxY
    Y &= v8
    height := 31
    height &= v9
    vF := 1
    height += vF    # maxY is *inclusive*
    v1 := 0xE0      # Take the top three bits for minX and maxX
    v8 &= v1  v8 >>= v8  v8 >>= v8  # Shift down and convert from bytes to pixels
    v9 &= v1  v9 >>= v9  v9 >>= v9

    startX := HORIZ_MARGIN
    startX += v8
    X := startX
    width := HORIZ_MARGIN
    width += v9
    width += 8      # maxX is *inclusive*
  end

  # Is this an interlaced frame?
  v1 := 8
  v1 &= v0
  stride := 1
  if v1 != 0 begin
    stride := 2
    # # Is this an odd frame?
    v1 := 4
    v1 &= v0
    if v1 != 0 begin
      Y += 1
      height += 1
    end
  end

:if SINGLEBYTE
  # Is this frame singleByte compressed?
  v1 := 96
  v1 &= v0
  if v1 == 96 then jump singleByte-decode
:end

  # Is this frame RLE compressed?
  v1 := 64
  v1 &= v0
  if v1 != 0 then jump rle-decode

  # Is this frame Huffman compressed?
  v1 := 32
  v1 &= v0
  if v1 != 0 then jump huffman-decode

  # Else: Fall through to plain copy

# XOR the data at i directly to the screen
# Don't mess up vB - vE, make sure we update frame pointer
: plain-copy
  loop
    draw-byte
    vF := 1
    i += vF
    vF := 1
    update-frame-pointer
    next-coordinate
    if Y < height then
  again
  :if SMOOTHING
    jump smoothing
  :else
    return
  :end

# Do the RLE decoding
# i points to the first run length
# Don't mess up vB - vE, make sure we update frame pointer
: rle-decode
  loop
    load v0
    :if SCHIP
      vF := 1
      i += vF
    :end
    vF := 1
    update-frame-pointer
    v1 := 128
    v1 &= v0
    vF := 127
    v0 &= vF

    if v1 == 0 begin
      # This is a repeating run, sprite i to the screen v0 times
      loop
        draw-byte
        next-coordinate
        v0 -= 1
        if v0 != 0 then
      again
      vF := 1
      i += vF
      vF := 1
      update-frame-pointer
    else
      # This is a copy run, sprite each byte to the screen
      vF := v0
      update-frame-pointer
      loop
        draw-byte
        vF := 1
        i += vF
        next-coordinate
        v0 -= 1
        if v0 != 0 then
      again
    end

    if Y < height then
  again
  :if SMOOTHING
    jump smoothing
  :else
    return
  :end

:if SINGLEBYTE
: singleByte-decode
  load v1 - v1
  vF := 1
  i += vF
  vF := 1
  update-frame-pointer
  loop
    while v1 != 0
    v1 -= 1
    load v0
    :if SCHIP
      vF := 1
      i += vF
    :end
    v8 := 31         # Take bottom 5 bits for Y
    v8 &= v0
    if stride == 2 then v8 <<= v8  # Interlacing
    v8 += Y
    X := 0xE0       # Take the top three bits for X
    X &= v0
    X >>= X         # Shift down and convert from bytes to pixels
    X >>= X
    X += HORIZ_MARGIN
    sprite X v8 1
    vF := 2
    update-frame-pointer
    vF := 1
    i += vF
  again
  return
:end

:if SPRITING
# Do the sprite-based decoding
# i points to the sprite data
# Don't mess up vB - vE, make sure we update frame pointer
: spriting-decode
  load v4 - v4   # This load doesn't post-increment in XO-CHIP
  vF := 1
  i += vF
  vF := 1
  update-frame-pointer
  loop
    load v1
    :if SCHIP
      vF := 2
      i += vF
    :end
    # Decode frame pointer
    i := long dictionary
    i += v1  i += v1  i += v1  i += v1
    i += v1  i += v1  i += v1  i += v1
    # Decode coordinates
    v1 := 0xF
    v1 &= v0
    v1 <<= v1  v1 <<= v1  v1 <<= v1
    vF := 0xF0
    v0 &= vF
    v0 >>= v0
    vF := 8
    v0 += vF
    # Sprite!
    sprite v0 v1 8
    # Prepare for next sprite
    vF := 2
    update-frame-pointer
    get-frame-pointer
    v4 -= 1
    if v4 != 0 then
  again
  return
:end

: next-coordinate
  X += 8
  if X != width then return
  X := startX
  Y += stride
  return

:if SMOOTHING
:macro smoothing-sample-pixel {
  sprite X Y 1
  sprite X Y 1
}

: smoothing
  Y := 1
  i := smoothing-pixel
  loop
    X := HORIZ_MARGIN
    loop
      # Read the current pixel value
      smoothing-sample-pixel
      v0 := vF
      # Read the pixels above it
      Y -= 1
      smoothing-sample-pixel
      if v0 != vF begin
        # Found a decoding artefact, should be the same. Fix the issue:
        Y += 1
        sprite X Y 1
        Y -= 1
        vF := 1
        v0 ^= vF
      end
      # Check if the pixel to the top left and the top right are different
      # from the current pixel
      X -= 1
      smoothing-sample-pixel
      X += 1
      if v0 == vF begin
        X += 1
        smoothing-sample-pixel
        X -= 1
        if v0 == vF begin
          Y += 1
          jump smoothing-resume
        end
      end
      # There's a difference to the top left or top right, so check below
      Y += 2
      smoothing-sample-pixel
      if v0 != vF begin
        # If different, check if both the pixel below and to the left and
        # below and to the right are also different
        X -= 1
        smoothing-sample-pixel
        X += 1
        if v0 != vF begin
          X += 1
          smoothing-sample-pixel
          X -= 1
          Y -= 1
          if v0 != vF then sprite X Y 1
          jump smoothing-resume
        end
      end
      Y -= 1
: smoothing-resume
      X += 1
      if X != HORIZ_END then
    again
    Y += 2
    if Y != 31 then
  again
  return

: smoothing-pixel
  0b10000000
:end

:include "huffman.8o"
