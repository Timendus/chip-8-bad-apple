# +-----------------------------------------
# | XO-Tracker v0.1.1 Clean Version
# +-----------------------------------------
# Code by Kouzeru, cut into pieces by Timendus ðŸ˜„

: songPlayNextTick
  songUpdateTick
  songUpdateFrame
  songUpdateBuzzer
  return

: songUpdateTick
	i := tickRate  load v1  v1 += v0  i := tickRate  save v1  loop
		vF := 60  v1 -= vF  if vF == 0 then  return  i := tickRate  save v1
		i := tickStates  load v1  v0 += 1  i := tickStates  save v0
	if v0 == v1 then  jump songStep  i := tickRate  load v1  again

: songStepRowNext  v2 := 0  : songStepRow
  i := tickStates  save v2  advanceSeqRefData
: songStep  # advance row position of song
  # Jump to next frame when row length is reached or jump command is found
    i := tickStates  load v3  if v2 == v3 then  jump songStepRowNext
		i:=seqRefData  load v1  v2 := v1  if v0 == 2 then  jump songStepRow
  # Apply pitch and apply samples when the command is defined as note key
    if v0 != 0 begin  if v0 == 1 begin  v2 := 0  v3 := 0  else
    v1 >>= v1  v1 >>= v1  i := long instrSet  i += v1  i += v1
		load v2 - v3  i := curBuzz  v1 := v0  save v1  end
		v0 := 1  v1 := 1  i := curSamp  save v3  end
  # Update tickrate
	  i := tickStates  load v2  v3 := v1
    i:=seqRefData  load v1  v0 := 3  v0 &= v1
		i := tickSelect  save v0
    i:=songProp  i += v0  load v1 - v1  v0 := 0
		i := tickStates  v2 += 1  save v2
		return

: songUpdateFrame  # uses v0-vF
    i := curBuzz  load v7  # Load the current states
		v7 >>= v7  if vF != 0 then  v7 += 128
		v6 >>= v6  if vF != 0 then  v6 += 128
  # Update counters first
	  i := long ornData  i += v7  i += v7  load v9 - v9  i += v5  load vB - vB
		i := long smpRef   i += v6  i += v6  load v8 - v8  i += v4  load vA - vA
    i := curSamp  load v3  v1 += 1  if v1 == 16 then  v1 := v9
		v0 += 1  if v0 == 16 then  v0 := v8  i := curSamp  save v1
  # Accumulate the pitches and update the current pitch
		v2 >>= vB  v3 := vF  i := curBuzz  load v0  v1 <<= v2
		if v3 == 0 then  v1 += v0  i := curBuzz  save v1
  # And update the current audio sample buffer
    i := long smpData  i += vA  load vF
    i := curSampData  save vF  return

: songUpdateBuzzer  i := curBuzz  load v1  vF := 255
  i := curSampData  audio buzzerpitch v1  buzzer := vF  return

: advanceSeqRefData
  i := seqRefLoop  load v3  i := seqRefPlay  load v1
  v1 += 1  if v1 == 0 then  v0 += 1  i := seqRefLoop
  if v1 == v3 begin  if v0 == v2 begin  load v1  end  end
  i := seqRefPlay  save v1  : updateSeqRefData  seqRefsetI  load v0
  i := long seqFrameLookUpTable  i += v0  i += v0  load v1
  i := sRDW  save v1  return

: songLoadAddresses
  i := songChoosen  v1 := 128  save v1
  i := songList  i += v0  i += v0  load v1
	i := writePointer  save v1  setItoPointer  load v7
  i := seqRefStart  save v5  i := seqRefPlay  save v1  i := lSL  save v4 - v5
  i:=songProp  v0 := 5  i += v0  load v2 - v3  i := rowLength  save v2 - v3
  v0 := v6  v1 := v7  i := long seqFrameLookUpTable  v3 := 0  v2 += v2
  loop  save v1  v1 += v2  v0 += vF  v3 += 1  if v3 != 0 then again
: songReset
  i := zeroes load v7  i := curBuzz  save v7
	i:=songProp  load v1 - v1  i := tickStates  save v2
	i:=songProp  v0 := 4  i += v0  load v0  i := tickRate  save v0
  i := seqRefStart  load v1  i := seqRefPlay  save v1
	updateSeqRefData  return

: setItoPointer
  0xF0 0
: writePointer 0 0
  return
: programSize

: i:=seqRefData   0xF0 00  : sRDW 0 0  i += v2  i += v2  return
: i:=songProp  0xF0 0  : lSL  0 0  return

: seqRefStart   0 0
: seqRefLoop    0 0
: seqRefEnd     0 0
: seqRefsetI 0xF0 0
: seqRefPlay    0 0 #current seq frame
return

:monitor seqRefPlay 2

:calc z { HERE }
: songList  mySongList

: songListLen :byte { ( HERE - z ) / 2 }
: songChoosen  0
: songDispDur  0

: curBuzz # Current state of pitch
  0 # original
  0 # altered pitch, being used in buzzpitch
  0 #
  0 #
: curSamp  # Current states of sampRef and orn
  0 # sampRef counter
  0 # ornament counter
  0 # sampRef offset
  0 # ornament offset

:monitor curBuzz 4
:monitor curSamp 4

: tickStates 0  # current frames in tick
: tickLength 0  # current frames per tick
: rowStates  0  # current row in frame
: rowLength  0  # current row per frame
: rowsPerQN  0  # row per quarter note
: tickSelect 0  # current tick selected
: tickRate   0  # current ticks per second
: tickSub    0  # current subticks

:monitor tickStates 2
:monitor rowStates 2

: curSampData # current sample data being played
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

: zeroes  0 0 0 0
          1 1 0 0 # for also song reset values

# 16-BIT LSFR noise generator
:calc  lsfrSeed { 18241 }
:macro lsfr z { :calc z { ( ( ( ( z & 1 ) ^ ( ( z >> 1 ) & 1 ) ) << 15 ) | ( z >> 1 ) ) } }
:macro lsfrShftNybble { lsfr lsfrSeed lsfr lsfrSeed lsfr lsfrSeed lsfr lsfrSeed }
:macro NOIS { :byte { lsfrSeed } lsfrShftNybble lsfrShftNybble }

:macro ---- { 0b00000000 }
:macro &--- { 0b11000000 }
:macro &&-- { 0b11110000 }
:macro &&&- { 0b11111100 }
:macro &&&& { 0b11111111 }

#data

: smpData  # SAMPLE BUFFER DATA  [ 128 bytes ]
  ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----  # 0x00 |        Silence
  &&-- ---- ---- ---- &&-- ---- ---- ---- &&-- ---- ---- ---- &&-- ---- ---- ----  # 0x10 |  12.5% Pulse Duty
  &&&& ---- ---- ---- &&&& ---- ---- ---- &&&& ---- ---- ---- &&&& ---- ---- ----  # 0x20 |  25.0% Pulse Duty
  &&&& &&&& ---- ---- &&&& &&&& ---- ---- &&&& &&&& ---- ---- &&&& &&&& ---- ----  # 0x30 |  50.0% Pulse Duty
  NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS ---- ---- ---- ---- ---- ---- ---- ----  # 0x40 |  50.0% Pulse Noise
  NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS  # 0x50 | 100.0% Pulse Noise
  NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS  # 0x60 | 100.0% Pulse Noise
  NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS NOIS  # 0x70 | 100.0% Pulse Noise
	&&&& &&&- ---- ---- &&&& &&&- ---- ---- &&&& &&&- ---- ---- &&&& &&&- ---- ----  # 0x80 | 43.25% Pulse Duty
	&&&& &&-- ---- ---- &&&& &&-- ---- ---- &&&& &&-- ---- ---- &&&& &&-- ---- ----  # 0x90 | 37.50% Pulse Duty
	&&&& &--- ---- ---- &&&& &--- ---- ---- &&&& &--- ---- ---- &&&& &--- ---- ----  # 0xA0 | 31.75% Pulse Duty
	&&&- ---- ---- ---- &&&- ---- ---- ---- &&&- ---- ---- ---- &&&- ---- ---- ----  # 0xB0 | 18.25% Pulse Duty

: instrSet     # SAMPLE AND ORNAMENT SEQUENCE MAPPER [ 128 bytes ]
#    0          1          2          3          4          5          6          7
#          8          9         10         11         12         13         14         15
# __________ __________ __________ __________ __________ __________ __________ __________
#| smpI ornI| smpI ornI| smpI ornI| smpI ornI| smpI ornI| smpI ornI| smpI ornI| smpI ornI|
  0x00 0x00  0x10 0x10  0x20 0x20  0x30 0x30  0x80 0x01  0x80 0x11  0xC0 0x01  0xC0 0x11  # Silence + HKS & 12
  0x01 0x00  0x11 0x10  0x21 0x20  0x31 0x30  0x01 0x21  0x40 0x21  0x80 0x21  0xC0 0x21  # User-def instruments
  0x40 0x00  0x50 0x10  0x60 0x20  0x70 0x30  0x40 0x40  0x50 0x50  0x60 0x60  0x70 0x70  # 12.5% Lead + HKS +
  0x40 0x80  0x50 0x90  0x60 0xA0  0x70 0xB0  0x40 0xC0  0x50 0xD0  0x60 0xE0  0x70 0xF0  # maj-min-dim chords
  0x80 0x00  0x90 0x10  0xA0 0x20  0xB0 0x30  0x80 0x40  0x90 0x50  0xA0 0x60  0xB0 0x70  # 25.0% Lead + HKS +
  0x80 0x80  0x90 0x90  0xA0 0xA0  0xB0 0xB0  0x80 0xC0  0x90 0xD0  0xA0 0xE0  0xB0 0xF0  # maj-min-dim chords
  0xC0 0x00  0xD0 0x10  0xE0 0x20  0xF0 0x30  0xC0 0x40  0xD0 0x50  0xE0 0x60  0xF0 0x70  # 50.0% Lead + HKS +
  0xC0 0x80  0xD0 0x90  0xE0 0xA0  0xF0 0xB0  0xC0 0xC0  0xD0 0xD0  0xE0 0xE0  0xF0 0xF0  # maj-min-dim chords

: smpRef    # SAMPLE SEQUENCE DATA [ 256 bytes ]
# Loop    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15
#  PREDEFINED SAMPLE DATA
   15  0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00  # [0x00] Silence
   15  0x70 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00  # [0x10] Hat only
   15  0x50 0x40 0x30 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00  # [0x20] Kick only
   15  0x70 0x60 0x50 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00  # [0x30] Snare only
   15  0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10  # [0x40] 12.5 % Pulse Tone
   15  0x70 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10  # [0x50] Hat + 12.5 % Pulse
   15  0x50 0x40 0x30 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10  # [0x60] Kick + 12.5 % Pulse
   15  0x70 0x60 0x50 0x40 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10  # [0x70] Snare + 12.5 % Pulse
   15  0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20  # [0x80] 25 % Pulse Tone
   15  0x70 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20  # [0x90] Hat + 25 % Pulse
   15  0x50 0x40 0x30 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20  # [0xA0] Kick + 25 % Pulse
   15  0x70 0x60 0x50 0x40 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20  # [0xB0] Snare + 25 % Pulse
   15  0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30  # [0xC0] 50 % Pulse Tone
   15  0x70 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30  # [0xD0] Hat + 50 % Pulse
   15  0x50 0x40 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30  # [0xE0] Kick + 50 % Pulse
   15  0x70 0x60 0x50 0x40 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30  # [0xF0] Snare + 50 % Pulse
#  USER DEFINED SAMPLE DATA
    8  0x20 0xA0 0x90 0x80 0x30 0x80 0x90 0xA0 0x20 0xA0 0x90 0x80 0x30 0x80 0x90  # [0x01] 25%-50% PWM Tone
		8  0x70 0xA0 0x90 0x80 0x30 0x80 0x90 0xA0 0x20 0xA0 0x90 0x80 0x30 0x80 0x90  # [0x11] Hat + 25%-50% PWM
		8  0x50 0x40 0x30 0x80 0x30 0x80 0x90 0xA0 0x20 0xA0 0x90 0x80 0x30 0x80 0x90  # [0x21] Kick + 25%-50% PWM
		8  0x70 0x60 0x50 0x40 0x30 0x80 0x90 0xA0 0x20 0xA0 0x90 0x80 0x30 0x80 0x90  # [0x31] Snare + 25%-50% PWM
   #   theres no other samples needed beside above, hence nothing.

: ornData   # ORNAMENT SEQUENCE DATA [ 256 bytes ]
#       Odd values (e.g. 63 67 71 ) is fixed pitch alter.
#       Even values (e.g 4 8 12 -4 -8 -12 ) is relative pitch alter.
#       Zero value won't alter the current pitch.
# Loop    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15
#  PREDEFINED ORNAMENTS DATA
   13     0    0    0    0    0    0    0    0    0    0    0    0    0    0    0  # [0x00] Tone
   13   211    0    0    0    0    0    0    0    0    0    0    0    0    0    0  # [0x10] Hat + tone
   13   147  103   67    0    0    0    0    0    0    0    0    0    0    0    0  # [0x20] Kick + tone
   13   107  171  159  147    0    0    0    0    0    0    0    0    0    0    0  # [0x30] Snare + tone
   13    16   28    0   16   28    0   16   28    0   16   28    0   16   28    0  # [0x40] Major chord tone
   13   211   16   28    0   16   28    0   16   28    0   16   28    0   16   28  # [0x50] Hat + major chord
   13   147  103   67   16   28    0   16   28    0   16   28    0   16   28    0  # [0x60] Kick + major chord
   13   107  171  159  147   16   28    0   16   28    0   16   28    0   16   28  # [0x70] Snare + major chord
   13    12   28    0   12   28    0   12   28    0   12   28    0   12   28    0  # [0x80] Minor chord tone
   13   211   12   28    0   12   28    0   12   28    0   12   28    0   12   28  # [0x90] Hat + minor chord
   13   147  103   67   12   28    0   12   28    0   12   28    0   12   28    0  # [0xA0] Kick + minor chord
   13   107  171  159  147   12   28    0   12   28    0   12   28    0   12   28  # [0xB0] Snare + minor chord
   13    12   24    0   12   24    0   12   24    0   12   24    0   12   24    0  # [0xC0] Diminish chord tone
   13   211   12   24    0   12   24    0   12   24    0   12   24    0   12   24  # [0xD0] Hat + diminish chord
   13   147  103   67   12   24    0   12   24    0   12   24    0   12   24    0  # [0xE0] Kick + diminish chord
   13   107  171  159  147   12   24    0   12   24    0   12   24    0   12   24  # [0xF0] Snare + diminish chord
#  USER DEFINED ORNAMENTS DATA
   15   -20  -16   -8    0    0    0    0    0    0    0    0    0    0    0    0  # [0x01] SlideUp
   15    20   16    8    0    0    0    0    0    0    0    0    0    0    0    0  # [0x11] SlideDown
   10     2    2    0   -2   -2    0    2    2    0   -2   -2    0    2    2    0  # [0x21] Vibratio

: seqFrameLookUpTable
:org { seqFrameLookUpTable + 512 }

#+--------------------------------------------------------
#| MISCELLANEOUS THINGS,
#| In order to make easy of music making, some inputs are mapped here.
#+--------------------------------------------------------

# Note key name mappings
  :macro ... { 0   } # blank/continue
  :macro --- { 1   } # mute
  :macro === { 2   } # jump next

# Precise pitch table according to corresponding standard note key
  :macro G$1 { 3   } :macro C-3 { 67  } :macro E-4 { 131 } :macro G$5 { 195 }
  :macro A-1 { 7   } :macro C$3 { 71  } :macro F-4 { 135 } :macro A-5 { 199 }
  :macro A$1 { 11  } :macro D-3 { 75  } :macro F$4 { 139 } :macro A$5 { 203 }
  :macro B-1 { 15  } :macro D$3 { 79  } :macro G-4 { 143 } :macro B-5 { 207 }
  :macro C-2 { 19  } :macro E-3 { 83  } :macro G$4 { 147 } :macro C-6 { 211 }
  :macro C$2 { 23  } :macro F-3 { 87  } :macro A-4 { 151 } :macro C$6 { 215 }
  :macro D-2 { 27  } :macro F$3 { 91  } :macro A$4 { 155 } :macro D-6 { 219 }
  :macro D$2 { 31  } :macro G-3 { 95  } :macro B-4 { 159 } :macro D$6 { 223 }
  :macro E-2 { 34  } :macro G$3 { 99  } :macro C-5 { 163 } :macro E-6 { 227 }
  :macro F-2 { 39  } :macro A-3 { 103 } :macro C$5 { 167 } :macro F-6 { 231 }
  :macro F$2 { 43  } :macro A$3 { 107 } :macro D-5 { 171 } :macro F$6 { 235 }
  :macro G-2 { 47  } :macro B-3 { 111 } :macro D$5 { 175 } :macro G-6 { 239 }
  :macro G$2 { 51  } :macro C-4 { 115 } :macro E-5 { 179 } :macro G$6 { 243 }
  :macro A-2 { 55  } :macro C$4 { 119 } :macro F-5 { 183 } :macro A-6 { 247 }
  :macro A$2 { 59  } :macro D-4 { 123 } :macro F$5 { 187 } :macro A$6 { 251 }
  :macro B-2 { 63  } :macro D$4 { 127 } :macro G-5 { 191 } :macro B-6 { 255 }

# Predefined sample keys
  :macro defS z n { :macro z l { :byte { ( l & 3 ) | ( n << 2 ) } } }
  defS -.. 0x0   defS A.. 0x10   defS B.. 0x20   defS C.. 0x30
  defS -.H 0x1   defS A.H 0x11   defS B.H 0x21   defS C.H 0x31
  defS -.K 0x2   defS A.K 0x12   defS B.K 0x22   defS C.K 0x32
  defS -.S 0x3   defS A.S 0x13   defS B.S 0x23   defS C.S 0x33
  defS -J. 0x4   defS AJ. 0x14   defS BJ. 0x24   defS CJ. 0x34
  defS -JH 0x5   defS AJH 0x15   defS BJH 0x25   defS CJH 0x35
  defS -JK 0x6   defS AJK 0x16   defS BJK 0x26   defS CJK 0x36
  defS -JS 0x7   defS AJS 0x17   defS BJS 0x27   defS CJS 0x37
  defS -I. 0x8   defS AI. 0x18   defS BI. 0x28   defS CI. 0x38
  defS -IH 0x9   defS AIH 0x19   defS BIH 0x29   defS CIH 0x39
  defS -IK 0xA   defS AIK 0x1A   defS BIK 0x2A   defS CIK 0x3A
  defS -IS 0xB   defS AIS 0x1B   defS BIS 0x2B   defS CIS 0x3B
  defS -D. 0xC   defS AD. 0x1C   defS BD. 0x2C   defS CD. 0x3C
  defS -DH 0xD   defS ADH 0x1D   defS BDH 0x2D   defS CDH 0x3D
  defS -DK 0xE   defS ADK 0x1E   defS BDK 0x2E   defS CDK 0x3E
  defS -DS 0xF   defS ADS 0x1F   defS BDS 0x2F   defS CDS 0x3F
# User defined sample keys
	defS U-0 4     defS U-1 5      defS U-2 6      defS U-3 7
  defS U-4 8     defS U-5 9      defS U-6 10     defS U-7 11
  defS U-8 12    defS U-9 13     defS U-A 14     defS U-B 15
:macro |>--TitleName: k n { : n 32 text5 k 255 }



|> programSize  # reports how much space for the main program took
